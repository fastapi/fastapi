# lextab.py. This file automatically created by PLY (version 3.10). Don't edit!
_tabversion = "3.10"
_lextokens = {
    "INT_CONST_CHAR",
    "VOID",
    "LBRACKET",
    "WCHAR_CONST",
    "FLOAT_CONST",
    "MINUS",
    "RPAREN",
    "STRUCT",
    "LONG",
    "PLUS",
    "ELLIPSIS",
    "U32STRING_LITERAL",
    "GT",
    "GOTO",
    "ENUM",
    "PERIOD",
    "GE",
    "INT_CONST_DEC",
    "ARROW",
    "_STATIC_ASSERT",
    "__INT128",
    "HEX_FLOAT_CONST",
    "DOUBLE",
    "MINUSEQUAL",
    "INT_CONST_OCT",
    "TIMESEQUAL",
    "OR",
    "SHORT",
    "RETURN",
    "RSHIFTEQUAL",
    "_ALIGNAS",
    "RESTRICT",
    "STATIC",
    "SIZEOF",
    "UNSIGNED",
    "PLUSPLUS",
    "COLON",
    "WSTRING_LITERAL",
    "DIVIDE",
    "FOR",
    "UNION",
    "EQUALS",
    "ELSE",
    "ANDEQUAL",
    "EQ",
    "AND",
    "TYPEID",
    "LBRACE",
    "PPHASH",
    "INT",
    "SIGNED",
    "CONTINUE",
    "NOT",
    "OREQUAL",
    "MOD",
    "RSHIFT",
    "DEFAULT",
    "_NORETURN",
    "CHAR",
    "WHILE",
    "DIVEQUAL",
    "_ALIGNOF",
    "EXTERN",
    "LNOT",
    "CASE",
    "LAND",
    "REGISTER",
    "MODEQUAL",
    "NE",
    "SWITCH",
    "INT_CONST_HEX",
    "_COMPLEX",
    "PPPRAGMASTR",
    "PLUSEQUAL",
    "U32CHAR_CONST",
    "CONDOP",
    "U8STRING_LITERAL",
    "BREAK",
    "VOLATILE",
    "PPPRAGMA",
    "INLINE",
    "INT_CONST_BIN",
    "DO",
    "U8CHAR_CONST",
    "CONST",
    "U16STRING_LITERAL",
    "LOR",
    "CHAR_CONST",
    "LSHIFT",
    "RBRACE",
    "_BOOL",
    "LE",
    "SEMI",
    "_THREAD_LOCAL",
    "LT",
    "COMMA",
    "U16CHAR_CONST",
    "OFFSETOF",
    "_ATOMIC",
    "TYPEDEF",
    "XOR",
    "AUTO",
    "TIMES",
    "LPAREN",
    "MINUSMINUS",
    "ID",
    "IF",
    "STRING_LITERAL",
    "FLOAT",
    "XOREQUAL",
    "LSHIFTEQUAL",
    "RBRACKET",
}
_lexreflags = 64
_lexliterals = ""
_lexstateinfo = {"ppline": "exclusive", "pppragma": "exclusive", "INITIAL": "inclusive"}
_lexstatere = {
    "ppline": [
        (
            '(?P<t_ppline_FILENAME>"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_ppline_LINE_NUMBER>(0(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|([1-9][0-9]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?))|(?P<t_ppline_NEWLINE>\\n)|(?P<t_ppline_PPLINE>line)',
            [
                None,
                ("t_ppline_FILENAME", "FILENAME"),
                None,
                None,
                ("t_ppline_LINE_NUMBER", "LINE_NUMBER"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_ppline_NEWLINE", "NEWLINE"),
                ("t_ppline_PPLINE", "PPLINE"),
            ],
        )
    ],
    "pppragma": [
        (
            "(?P<t_pppragma_NEWLINE>\\n)|(?P<t_pppragma_PPPRAGMA>pragma)|(?P<t_pppragma_STR>.+)",
            [
                None,
                ("t_pppragma_NEWLINE", "NEWLINE"),
                ("t_pppragma_PPPRAGMA", "PPPRAGMA"),
                ("t_pppragma_STR", "STR"),
            ],
        )
    ],
    "INITIAL": [
        (
            "(?P<t_PPHASH>[ \\t]*\\#)|(?P<t_NEWLINE>\\n+)|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_FLOAT_CONST>((((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))[FfLl]?))|(?P<t_HEX_FLOAT_CONST>(0[xX]([0-9a-fA-F]+|((([0-9a-fA-F]+)?\\.[0-9a-fA-F]+)|([0-9a-fA-F]+\\.)))([pP][+-]?[0-9]+)[FfLl]?))|(?P<t_INT_CONST_HEX>0[xX][0-9a-fA-F]+(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|(?P<t_INT_CONST_BIN>0[bB][01]+(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)",
            [
                None,
                ("t_PPHASH", "PPHASH"),
                ("t_NEWLINE", "NEWLINE"),
                ("t_LBRACE", "LBRACE"),
                ("t_RBRACE", "RBRACE"),
                ("t_FLOAT_CONST", "FLOAT_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_HEX_FLOAT_CONST", "HEX_FLOAT_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_INT_CONST_HEX", "INT_CONST_HEX"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_INT_CONST_BIN", "INT_CONST_BIN"),
            ],
        ),
        (
            "(?P<t_BAD_CONST_OCT>0[0-7]*[89])|(?P<t_INT_CONST_OCT>0[0-7]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|(?P<t_INT_CONST_DEC>(0(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|([1-9][0-9]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?))|(?P<t_INT_CONST_CHAR>'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F])))){2,4}')|(?P<t_CHAR_CONST>'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))')|(?P<t_WCHAR_CONST>L'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))')|(?P<t_U8CHAR_CONST>u8'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))')|(?P<t_U16CHAR_CONST>u'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))')|(?P<t_U32CHAR_CONST>U'([^'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?'\"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))')",
            [
                None,
                ("t_BAD_CONST_OCT", "BAD_CONST_OCT"),
                ("t_INT_CONST_OCT", "INT_CONST_OCT"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_INT_CONST_DEC", "INT_CONST_DEC"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_INT_CONST_CHAR", "INT_CONST_CHAR"),
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_CHAR_CONST", "CHAR_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_WCHAR_CONST", "WCHAR_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_U8CHAR_CONST", "U8CHAR_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_U16CHAR_CONST", "U16CHAR_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_U32CHAR_CONST", "U32CHAR_CONST"),
            ],
        ),
        (
            '(?P<t_UNMATCHED_QUOTE>(\'([^\'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?\'"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))*\\n)|(\'([^\'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?\'"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))*$))|(?P<t_BAD_CHAR_CONST>(\'([^\'\\\\\\n]|(\\\\(([a-wyzA-Z._~!=&\\^\\-\\\\?\'"]|x(?![0-9a-fA-F]))|(\\d+)(?!\\d)|(x[0-9a-fA-F]+)(?![0-9a-fA-F]))))[^\'\n]+\')|(\'\')|(\'([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-9])[^\'\\n]*\'))|(?P<t_WSTRING_LITERAL>L"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_U8STRING_LITERAL>u8"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_U16STRING_LITERAL>u"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_U32STRING_LITERAL>U"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_BAD_STRING_LITERAL>"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-9])([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_ID>[a-zA-Z_$][0-9a-zA-Z_$]*)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\[0-9a-zA-Z._~!=&\\^\\-\\\\?\'"]))*")|(?P<t_ELLIPSIS>\\.\\.\\.)|(?P<t_PLUSPLUS>\\+\\+)|(?P<t_LOR>\\|\\|)|(?P<t_XOREQUAL>\\^=)|(?P<t_OREQUAL>\\|=)|(?P<t_LSHIFTEQUAL><<=)|(?P<t_RSHIFTEQUAL>>>=)|(?P<t_PLUSEQUAL>\\+=)|(?P<t_TIMESEQUAL>\\*=)',
            [
                None,
                ("t_UNMATCHED_QUOTE", "UNMATCHED_QUOTE"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_BAD_CHAR_CONST", "BAD_CHAR_CONST"),
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                ("t_WSTRING_LITERAL", "WSTRING_LITERAL"),
                None,
                None,
                ("t_U8STRING_LITERAL", "U8STRING_LITERAL"),
                None,
                None,
                ("t_U16STRING_LITERAL", "U16STRING_LITERAL"),
                None,
                None,
                ("t_U32STRING_LITERAL", "U32STRING_LITERAL"),
                None,
                None,
                ("t_BAD_STRING_LITERAL", "BAD_STRING_LITERAL"),
                None,
                None,
                None,
                None,
                None,
                ("t_ID", "ID"),
                (None, "STRING_LITERAL"),
                None,
                None,
                (None, "ELLIPSIS"),
                (None, "PLUSPLUS"),
                (None, "LOR"),
                (None, "XOREQUAL"),
                (None, "OREQUAL"),
                (None, "LSHIFTEQUAL"),
                (None, "RSHIFTEQUAL"),
                (None, "PLUSEQUAL"),
                (None, "TIMESEQUAL"),
            ],
        ),
        (
            "(?P<t_PLUS>\\+)|(?P<t_MODEQUAL>%=)|(?P<t_DIVEQUAL>/=)|(?P<t_RBRACKET>\\])|(?P<t_CONDOP>\\?)|(?P<t_XOR>\\^)|(?P<t_LSHIFT><<)|(?P<t_LE><=)|(?P<t_LPAREN>\\()|(?P<t_ARROW>->)|(?P<t_EQ>==)|(?P<t_NE>!=)|(?P<t_MINUSMINUS>--)|(?P<t_OR>\\|)|(?P<t_TIMES>\\*)|(?P<t_LBRACKET>\\[)|(?P<t_GE>>=)|(?P<t_RPAREN>\\))|(?P<t_LAND>&&)|(?P<t_RSHIFT>>>)|(?P<t_MINUSEQUAL>-=)|(?P<t_PERIOD>\\.)|(?P<t_ANDEQUAL>&=)|(?P<t_EQUALS>=)|(?P<t_LT><)|(?P<t_COMMA>,)|(?P<t_DIVIDE>/)|(?P<t_AND>&)|(?P<t_MOD>%)|(?P<t_SEMI>;)|(?P<t_MINUS>-)|(?P<t_GT>>)|(?P<t_COLON>:)|(?P<t_NOT>~)|(?P<t_LNOT>!)",
            [
                None,
                (None, "PLUS"),
                (None, "MODEQUAL"),
                (None, "DIVEQUAL"),
                (None, "RBRACKET"),
                (None, "CONDOP"),
                (None, "XOR"),
                (None, "LSHIFT"),
                (None, "LE"),
                (None, "LPAREN"),
                (None, "ARROW"),
                (None, "EQ"),
                (None, "NE"),
                (None, "MINUSMINUS"),
                (None, "OR"),
                (None, "TIMES"),
                (None, "LBRACKET"),
                (None, "GE"),
                (None, "RPAREN"),
                (None, "LAND"),
                (None, "RSHIFT"),
                (None, "MINUSEQUAL"),
                (None, "PERIOD"),
                (None, "ANDEQUAL"),
                (None, "EQUALS"),
                (None, "LT"),
                (None, "COMMA"),
                (None, "DIVIDE"),
                (None, "AND"),
                (None, "MOD"),
                (None, "SEMI"),
                (None, "MINUS"),
                (None, "GT"),
                (None, "COLON"),
                (None, "NOT"),
                (None, "LNOT"),
            ],
        ),
    ],
}
_lexstateignore = {"ppline": " \t", "pppragma": " \t", "INITIAL": " \t"}
_lexstateerrorf = {
    "ppline": "t_ppline_error",
    "pppragma": "t_pppragma_error",
    "INITIAL": "t_error",
}
_lexstateeoff = {}
