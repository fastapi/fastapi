# sql/__init__.py
# Copyright (C) 2005-2022 the SQLAlchemy authors and contributors
# <see AUTHORS file>
#
# This module is part of SQLAlchemy and is released under
# the MIT License: https://www.opensource.org/licenses/mit-license.php

from .base import Executable
from .compiler import COLLECT_CARTESIAN_PRODUCTS, FROM_LINTING, NO_LINTING, WARN_LINTING
from .expression import (
    LABEL_STYLE_DEFAULT,
    LABEL_STYLE_DISAMBIGUATE_ONLY,
    LABEL_STYLE_NONE,
    LABEL_STYLE_TABLENAME_PLUS_COL,
    Alias,
    ClauseElement,
    ColumnCollection,
    ColumnElement,
    CompoundSelect,
    Delete,
    False_,
    FromClause,
    Insert,
    Join,
    LambdaElement,
    Select,
    Selectable,
    StatementLambdaElement,
    Subquery,
    TableClause,
    TableSample,
    True_,
    Update,
    Values,
    alias,
    all_,
    and_,
    any_,
    asc,
    between,
    bindparam,
    case,
    cast,
    collate,
    column,
    cte,
    delete,
    desc,
    distinct,
    except_,
    except_all,
    exists,
    extract,
    false,
    func,
    funcfilter,
    insert,
    intersect,
    intersect_all,
    join,
    label,
    lambda_stmt,
    lateral,
    literal,
    literal_column,
    modifier,
    not_,
    null,
    nulls_first,
    nulls_last,
    nullsfirst,
    nullslast,
    or_,
    outerjoin,
    outparam,
    over,
    quoted_name,
    select,
    subquery,
    table,
    tablesample,
    text,
    true,
    tuple_,
    type_coerce,
    union,
    union_all,
    update,
    values,
    within_group,
)
from .visitors import ClauseVisitor


def __go(lcls):
    global __all__
    import inspect as _inspect

    from .. import util as _sa_util

    __all__ = sorted(
        name
        for name, obj in lcls.items()
        if not (name.startswith("_") or _inspect.ismodule(obj))
    )

    # from .traversals import _preconfigure_traversals
    from . import (
        base,
        coercions,
        elements,
        events,
        lambdas,
        schema,
        selectable,
        sqltypes,
        traversals,
        type_api,
    )
    from .annotation import Annotated, _prepare_annotations
    from .elements import AnnotatedColumnElement, ClauseList
    from .selectable import AnnotatedFromClause

    base.coercions = elements.coercions = coercions
    base.elements = elements
    base.type_api = type_api
    coercions.elements = elements
    coercions.lambdas = lambdas
    coercions.schema = schema
    coercions.selectable = selectable
    coercions.sqltypes = sqltypes
    coercions.traversals = traversals

    _prepare_annotations(ColumnElement, AnnotatedColumnElement)
    _prepare_annotations(FromClause, AnnotatedFromClause)
    _prepare_annotations(ClauseList, Annotated)

    # this is expensive at import time; elements that are used can create
    # their traversals on demand
    # _preconfigure_traversals(ClauseElement)

    _sa_util.preloaded.import_prefix("sqlalchemy.sql")

    from . import naming


__go(locals())
