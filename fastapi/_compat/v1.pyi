from typing import Any, Dict, List, Tuple

from typing_extensions import Literal

class BaseModel: ...
class BaseConfig: ...
class ValidationError(Exception): ...
class FieldInfo: ...
class ModelField: ...
class PydanticSchemaGenerationError(Exception): ...
class RequiredParam: ...
class Undefined: ...
class UndefinedType: ...
class Url: ...
class Validator: ...

def create_model(__name__: str, **kwargs: Any) -> Any: ...
def _model_rebuild(model: Any) -> None: ...
def _model_dump(
    model: Any, mode: Literal["json", "python"] = "json", **kwargs: Any
) -> Any: ...
def _get_model_config(model: Any) -> Any: ...
def _normalize_errors(errors: Any) -> Any: ...
def _regenerate_error_with_loc(*, errors: Any, loc_prefix: Tuple[Any, ...]) -> List[Dict[str, Any]]: ...
def get_schema_from_model_field(*, field: Any, model_name_map: Any, field_mapping: Any, separate_input_output_schemas: bool=True) -> Dict[str, Any]: ...
def get_definitions(*, fields: Any, model_name_map: Any, separate_input_output_schemas: bool=True) -> Tuple[Any, Dict[str, Dict[str, Any]]]: ...
def get_model_fields(model: Any) -> List[Any]: ...
def is_bytes_field(field: Any) -> bool: ...
def is_bytes_sequence_field(field: Any) -> bool: ...
def is_scalar_field(field: Any) -> bool: ...
def is_scalar_sequence_field(field: Any) -> bool: ...
def is_sequence_field(field: Any) -> bool: ...
def copy_field_info(field_info: Any, annotation: Any, **kwargs: Any) -> Any: ...
def create_body_model(fields: Any, model_name: str) -> Any: ...
def evaluate_forwardref(type_: Any, globalns: Dict[str, Any], localns: Dict[str, Any]) -> Any: ...
def get_annotation_from_field_info(annotation: Any, field_info: Any, field_name: str) -> Any: ...
def get_missing_field_error(loc: Tuple[str, ...], field: Any) -> Dict[str, Any]: ...
def serialize_sequence_value(*, field: Any, value: Any) -> Any: ...
def with_info_plain_validator_function(func: Any) -> Any: ...
def get_flat_models_from_fields(fields: Any, known_models: Any) -> Any: ...
def get_model_name_map(models: Any) -> Any: ...
def _is_error_wrapper(exc: Any) -> bool: ...
